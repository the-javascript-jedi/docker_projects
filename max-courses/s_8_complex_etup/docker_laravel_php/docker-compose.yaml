version: "3.8"

services:
# The server is our main entry point which will serve the application and which will then forward requests to the PHP interpreter for example. And the PHP interpreter will eventually indirectly talk to the MySQL database,
  server:
    image: 'nginx:stable-alpine'
    ports:
      - "8000:80"
    # bind my source folder to the var www html folder inside of the container.
    # copy the nginx file from the path provided(./nginx/nginx.conf):to the path inside docker container(/etc/nginx/nginx.conf:ro)
    # ro - read only so container can never change configuration
    volumes:
      - ./src:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    # depends_on - docker-compose makes sure that if we bring up this server service, it also automatically brings up the services on which depend. In this case PHP and MySQL.
    depends_on:
      - php
      - mysql
  php:
    build:
      context: ./dockerfiles
      dockerfile: php.dockerfile
    volumes:
    # bind mount point at the src folder in local machine and we'll then mount this to the var/www/html path inside of the container.
    # delegated is a optimization improvement
      - ./src:/var/www/html:delegated
      - ./src:/var/www/html/storage/logs
      - ./src:/var/www/html/storage/framework/sessions
      - ./src:/var/www/html/storage/framework/views
      - ./src:/var/www/html/storage/framework/cache
    # ports:
    # docker image for php exposes 9000, we expect 3000
    # we have to map 3000 to 9000.
    # host machine first:our container internal port.
      # - '3000:9000'  
  # mysql:
  mysql:
    image: mysql:5.7
    # to connect mysql we need to specify environment variables
    env_file:
      - ./env/mysql.env
  # composer:
  composer:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    # expose the source folder specified in composer.dockerfile
    volumes:
     - ./src:/var/www/html
  # artisan:
  # npm:    